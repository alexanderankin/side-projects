#user  nginx; # default
worker_processes  auto;

#error_log  /var/log/nginx/error.log notice;
#pid        /var/run/nginx.pid;


events {
    worker_connections 1024;
}


http {
    #default
    #include       /etc/nginx/mime.types;
    include       mime.types;
    default_type  application/octet-stream;

    #default:
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/access.log  main;

    #sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  600s; # default 75s
    client_max_body_size 0;

    #gzip  on;

    # create the headers variable, to modify later with lua
    map $host $headers { default ''; }

    log_format  main  '{'
                      '"remote_addr": "$remote_addr",'
                      '"time_local": "$time_local",'
                      '"request": "$request",'
                      '"request_uri": "$request_uri",'
                      '"status": "$status",'
                      '"headers": "$headers",'
                      '"body_bytes_sent": "$body_bytes_sent",'
                      '"": ""'
                      '}'
                      ;

    server {
        listen       80;
        server_name  localhost;

        #access_log  /var/log/nginx/host.access.log  main;

        location / {
            root   /usr/local/openresty/nginx/html/;
            index  index.html index.htm;
        }

        access_by_lua_block {
            function mapToString(map)
                local result = {}
                for key, value in pairs(map) do
                    local lowercaseKey = key:lower()
                    if not (lowercaseKey:find("auth") or lowercaseKey:find("key")) then
                        table.insert(result, key .. "=" .. value)
                    end
                end
                return table.concat(result, ",")
            end

            ngx.var.headers = mapToString(ngx.headers)
        }

        access_log  /var/log/nginx/access.log  main;

        location / {
            proxy_pass http://host.docker.internal:8080;
        }

        ##error_page  404              /404.html;
        #
        ## redirect server error pages to the static page /50x.html
        ##
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   /usr/share/nginx/html;
        #}
    }
}
