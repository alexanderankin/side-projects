#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # we are escaping already by using cjson to encode the log_entry
    log_format main escape=none '$log_entry';
    access_log logs/access.log main;

    # read the request body ahead of time please
    lua_need_request_body on;
    # load up some modules, and functions once to save time with jit
    init_by_lua_block {
        require "cjson"

        function filterHeaders(map)
            local result = {}
            for name, value in pairs(map) do
                local lower = name:lower()
                if not (lower:find("auth") or lower:find("key")) then
                    result[name] = value
                end
            end
            return result
        end
    }

    server {
        listen       80;
        server_name  localhost;

        keepalive_timeout  0;
        server_tokens off;
        more_clear_headers server;

        location / {
            #root   html;
            #index  index.html index.htm;
            proxy_pass http://localhost:8080;
            proxy_buffering off;
        }

        set $resp_body "";
        body_filter_by_lua_block {
            ngx.var.resp_body = ngx.var.resp_body .. ngx.arg[1];
        }

        set $log_entry "";
        log_by_lua_block {
            -- cached version, first loaded in init_by_lua_block
            local cjson = require "cjson"
            ngx.var.log_entry = cjson.encode({
                remote_addr = ngx.var.remote_addr,
                time_local = ngx.var.time_local,
                request_method = ngx.var.request_method,
                request_uri = ngx.var.request_uri,
                status = ngx.status,
                req = {
                    headers = filterHeaders(ngx.req.get_headers()),
                    body = ngx.var.request_body
                },
                resp = {
                    headers = filterHeaders(ngx.resp.get_headers()),
                    size = ngx.var.body_bytes_sent,
                    body = ngx.var.resp_body,
                },
            })
        }

        #error_page  404              /404.html;
        ## redirect server error pages to the static page /50x.html
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}
    }
}
