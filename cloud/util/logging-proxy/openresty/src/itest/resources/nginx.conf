
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # create the log entry variable, to modify later with lua
    map $host $log_entry { default ''; }

    ## create the headers variables, to modify later with lua
    #map $host $req_headers { default ''; }
    #map $host $res_headers { default ''; }

    log_format  main escape=none  '$log_entry';
    #log_format  main escape=none  '{'
    #                  '"remote_addr": "$remote_addr", '
    #                  '"time_local": "$time_local", '
    #                  '"request_method": "$request_method", '
    #                  '"request_uri": "$request_uri", '
    #                  '"status": "$status", '
    #                  '"req_headers": $req_headers, '
    #                  '"res_headers": $res_headers, '
    #                  '"res_body_size": "$body_bytes_sent", '
    #                  '"": ""'
    #                  '}'
    #                  ;
    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_need_request_body on;
    init_by_lua_block {
        require "cjson"

        function filterHeaders(map)
            local result = {}
            for name, value in pairs(map) do
                local lower = name:lower()
                if not (lower:find("auth") or lower:find("key")) then
                    result[name] = value
                end
            end
            return result
            --#local result = {}
            --#for key, value in pairs(map) do
            --#    local lowercaseKey = key:lower()
            --#    if not (lowercaseKey:find("auth") or lowercaseKey:find("key")) then
            --#        table.insert(result, key .. "=" .. value)
            --#    end
            --#end
            --#return table.concat(result, ",")
        end
    }

    server {
        set $res_body '';
        set $res_body_done '';
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            #root   html;
            #index  index.html index.htm;
            proxy_pass http://localhost:8080;
        }

        body_filter_by_lua_block {
            local t = ngx.var.res_body
            if (type(t) == 'string') then t = {}; end
            ngx.var.res_body = t

            t[#t + 1] = ngx.arg[1]
            if (ngx.arg[2]) then
                local cjson = require "cjson"
                -- none of these work!
                ngx.var.res_body_done = t[0] or "empty"
                --#ngx.var.res_body_done = table.tostring(t)
                --#ngx.var.res_body_done = cjson.encode(t)
            end
        }

        log_by_lua_block {
            -- cached version, first loaded in init_by_lua_block
            local cjson = require "cjson"
            ngx.var.log_entry = cjson.encode({
                remote_addr = ngx.var.remote_addr,
                time_local = ngx.var.time_local,
                request_method = ngx.var.request_method,
                request_uri = ngx.var.request_uri,
                status = ngx.status,
                req = {
                    headers = filterHeaders(ngx.req.get_headers()),
                },
                resp = {
                    headers = filterHeaders(ngx.resp.get_headers()),
                    size = ngx.var.body_bytes_sent,
                    body = ngx.var.res_body_done,
                },
            })
            --ngx.var.req_headers = mapToString(ngx.req.get_headers())
            --ngx.var.res_headers = mapToString(ngx.resp.get_headers())
        }

        #header_filter_by_lua_block {
        #    ngx.var.res_headers = mapToString(ngx.headers   )
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
