#file: noinspection HttpUrlsUsage
---
networks:
  grafana_network:

services:
  loki_read:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/config.yaml -target=read
    # ports:
    #   - "3101:3100"
    #   - "7946"
    #   - "9095"
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      grafana_network:
        aliases:
          - loki

  loki_write:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/config.yaml -target=write
    # ports:
    #   - "3102:3100"
    #   - "7946"
    #   - "9095"
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  loki_backend:
    image: grafana/loki:latest
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    # ports:
    #   - "3100"
    #   - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - grafana_network

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        exec minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    # ports:
    #   - "9000"
    # volumes:
    #   - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - grafana_network

  prometheus:
    image: prom/prometheus:latest
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/prometheus && \
        cat <<EOF > /etc/prometheus/prometheus.yml
        global:
          scrape_interval: 15s
          evaluation_interval: 15s

        scrape_configs:
          - job_name: 'pushgateway'
            static_configs:
              - targets: ['pushgateway:9091']
        EOF
        exec /bin/prometheus \
          --config.file=/etc/prometheus/prometheus.yml \
          --web.enable-remote-write-receiver \
          --storage.tsdb.path=/prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - grafana_network

  pushgateway:
    image: prom/pushgateway:latest
    networks:
      - grafana_network

  tempo:
    image: grafana/tempo:latest
    command: ["-config.file=/etc/tempo.yaml"]
    user: root
    entrypoint:
      - sh
      - -euc
      - |
        cat > /etc/tempo.yaml <<EOF
        server:
          log_level: info
          http_listen_port: 3200
          grpc_listen_port: 9095
          # http_tls_config:
          #   cert_file: /etc/tempo/certs/tls.crt
          #   key_file: /etc/tempo/certs/tls.key

        storage:
          trace:
            backend: local # backend configuration to use
            wal:
              path: /var/tempo/wal # where to store the wal locally
            local:
              path: /var/tempo/blocks

        distributor:
          receivers:
            otlp:
              protocols:
                grpc:
                  endpoint: "0.0.0.0:4317"
                http:
                  endpoint: "0.0.0.0:4318"

        ingester:
          trace_idle_period: 10s
          max_block_duration: 5m

        compactor:
          compaction:
            block_retention: 1h

        querier:
          frontend_worker:
            frontend_address: 127.0.0.1:9095

        usage_report:
          reporting_enabled: false
        EOF

        exec /tempo -config.file=/etc/tempo.yaml
    depends_on:
      - minio
    # volumes:
    #   - ./tempo.yaml:/etc/tempo.yaml:ro
    healthcheck:
      test: ["CMD", "wget", "-q", "http://localhost:3200/status"]
      interval: 5s
      timeout: 2s
      retries: 120
    stop_grace_period: 20s
    networks:
      - grafana_network

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            basicAuth: true
            basicAuthUser: user
            secureJsonData:
              basicAuthPassword: pass

          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://prometheus:9090
            uid: prometheus

          - name: Tempo
            type: tempo
            access: proxy
            url: http://tempo:3200
            basicAuth: true
            basicAuthUser: tempo
            secureJsonData:
              basicAuthPassword: supersecret
            jsonData:
              httpMethod: GET
              nodeGraph:
                enabled: true
              serviceMap:
                datasourceUid: prometheus
              tracesToLogsV2:
                datasourceUid: loki
                spanStartTimeShift: "-1h"
                spanEndTimeShift: "1h"
                filterByTraceID: true
                filterBySpanID: false
        EOF
        exec /run.sh

    ports:
      - "3001:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grafana_network

  gateway_genauth:
    image: alpine/openssl:3.5.3
    entrypoint:
      - sh
      - -euc
      - |
        printf "user:$(openssl passwd -6 pass)\n" > /secrets/.htpasswd
        exec tail -f /dev/null
    volumes:
      - secrets:/secrets

  gateway:
    image: nginx:alpine-slim
    depends_on:
      - loki_read
      - loki_write
    entrypoint:
      - sh
      - -euc
      - |
        while [ ! -f /secrets/.htpasswd ]; do
          echo "waiting for /secrets/.htpasswd..."
          sleep 1
        done

        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://loki_write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://loki_read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://loki_read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://loki_write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://loki_read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://loki_read:3100\$$request_uri;
            }

            location ~ /metrics/job/.* {
              proxy_pass       http://pushgateway:9091\$$request_uri;
            }

            location /tempo/v1/traces {
              proxy_pass       http://tempo:3200/v1/traces;
            }

            location /prometheus/api/v1/write {
              auth_basic           "Restricted";
              auth_basic_user_file "/secrets/.htpasswd";
              proxy_pass           http://prometheus:9090/api/v1/write;
            }
          }
        }
        EOF
        exec /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3101:3100"
    healthcheck:
      test: [ "CMD", "nc", "-vz", "127.0.0.1", "3100" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grafana_network
    volumes:
      - secrets:/secrets

volumes:
  secrets:
