package net.pe;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import java.math.BigInteger;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * this class contains the solution to the first page of the euler questions
 * because that is what is recommended for the Amazon SDE interview.
 * <p>
 * Questions beyond this are not published due to the notice on the projecteuler website:
 * "We hope that you enjoyed solving this problem. Please do not deprive others of going
 * through the same process by publishing your solution outside of Project Euler. Members
 * found to be spoiling problems beyond the first one-hundred problems will have their
 * accounts locked.".
 * <p>
 * It should be noted here also that I do not agree, but I am complying within their guidelines
 * (I am stopping at 50, not even their limit of 100).
 * <p>
 * No SDE outside "big-tech" should have this at the front of their mind anyway.
 * Go clean up your test suite, learn that framework, refactor that utility service,
 * and reduce the tech debt instead, to improve the output of you and your team.
 * <p>
 * I'm putting this here mainly so that I can prove to myself that I did it.
 * When I discovered my 10 years old account this year in 2023,
 * I struggled to recover the solutions to the same problems.
 * <p>
 * An effective programmer's philosophy is materialist, not pure and abstract (mathematical).
 */
@SuppressWarnings("SameParameterValue")
class ProblemsTest {
    private static boolean[] PROBLEM_SEVEN;

    /**
     * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3,5,6 and 9. The sum of these multiples is 23.
     * <p>
     * Find the sum of all the multiples of 3 or 5 below 1000.
     */
    int problemOne_naive(int upTo) {
        int result = 0;
        for (int i = 0; i < upTo; i++) {
            if (i % 5 == 0 || i % 3 == 0)
                result += i;
        }
        return result;
    }

    /**
     * @see #problemOne_naive(int)
     */
    int problemOne(int upTo) {
        var nums5 = (upTo - 1) / 5;
        var nums3 = (upTo - 1) / 3;
        var nums15 = (upTo - 1) / 15;

        var sum3 = (nums3 * (nums3 + 1) / 2) * 3;
        var sum5 = (nums5 * (nums5 + 1) / 2) * 5;
        var sum15 = (nums15 * (nums15 + 1) / 2) * 15;
        return sum3 + sum5 - sum15;
    }

    @ParameterizedTest
    @CsvSource({
            "10,23",
            "0,0",
            "3,0",
            "4,3",
            "6,8",
            "20,78",
            "1000,233168",
    })
    void test_problemOne(int upTo, int expected) {
        assertEquals(expected, problemOne_naive(upTo));
        assertEquals(expected, problemOne(upTo));
    }

    List<Integer> problemOneIntermediate_naive(int upTo) {
        List<Integer> result = new ArrayList<>();
        for (int i = 1; i < upTo; i++) {
            if (i % 5 == 0 || i % 3 == 0)
                result.add(i);
        }
        return result;
    }

    List<Integer> problemOneIntermediate(int upTo) {
        var nums5 = (upTo - 1) / 5;
        var nums3 = (upTo - 1) / 3;

        var result3 = IntStream.rangeClosed(1, nums3).map(i -> i * 3).boxed().toList();
        var result5 = IntStream.rangeClosed(1, nums5).map(i -> i * 5).boxed().toList();
        return Stream.concat(result3.stream(), result5.stream()).distinct().sorted().toList();
    }

    @ParameterizedTest
    @CsvSource({
            "0,''",
            "3,''",
            "4,'3'",
            "6,'3,5'",
            "10,'3,5,6,9'",
            "20,'3,5,6,9,10,12,15,18'",
    })
    void test_p1_intermediate(int upTo, String expectedString) {
        List<Integer> expected = Arrays.stream(expectedString.split(",")).filter(Predicate.not(String::isEmpty)).map(Integer::parseInt).toList();

        assertEquals(expected, problemOneIntermediate_naive(upTo), "naive");
        assertEquals(expected, problemOneIntermediate(upTo), "efficient");
    }

    /**
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
     * By starting with 1 and 2, the first 10 terms will be:1,2,3,5,8,13,21,34,55,89,...
     * <p>
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     * find the sum of the even-valued terms.
     */
    long problemTwo(int upTo) {
        long result = 0;
        int fib0 = 0;
        int fib1 = 1;
        while (true) {
            int fib = fib0 + fib1;
            if (fib > upTo) break;
            if (fib % 2 == 0)
                result += fib;
            fib0 = fib1;
            fib1 = fib;
        }
        return result;
    }

    @ParameterizedTest
    @CsvSource({
            // "10,44",  // misinterpreted upTo as count initially
            "4000000,4613732",
    })
    void test_problemTwo(int upTo, long expected) {
        assertEquals(expected, problemTwo(upTo));
    }

    long problemTwo(long input) {
        return primeFactors(input).stream().mapToLong(Long::longValue).reduce(0, Math::max);
    }

    @ParameterizedTest
    @CsvSource({
            "13195,29",
            "600851475143,6857",
    })
    void test_problemThree(long input, long expected) {
        assertEquals(expected, problemTwo(input));
    }

    // https://www.geeksforgeeks.org/java-program-for-efficiently-print-all-prime-factors-of-a-given-number/
    public List<Long> primeFactors(long n) {
        List<Long> primes = new ArrayList<>();
        // Print the number of 2s that divide n
        while (n % 2 == 0) {
            // System.out.print(2 + " ");
            primes.add((long) 2);
            n /= 2;
        }

        // n must be odd at this point.  So we can
        // skip one element (Note i = i +2)
        for (int i = 3; i <= Math.sqrt(n); i += 2) {
            // While i divides n, print i and divide n
            while (n % i == 0) {
                // System.out.print(i + " ");
                primes.add((long) i);
                n /= i;
            }
        }

        // This condition is to handle the case when
        // n is a prime number greater than 2
        if (n > 2)
            primes.add(n);
        return primes;
    }

    /**
     * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit
     * numbers is 9009=91×99.Find the largest palindrome made from the product of two 3-digit numbers.
     */
    long problemFour(int nDigits) {
        // equation: x1 * 10^4 + x2 * 10^3 + x2 * 10^2 + x1 * 10^1
        // sum x{1..n} = xi * 10^i + xi * 10^(n - i)
        // sum x{1..n} = xi(10^i + 10^(n - i))
        // sum = y * z
        // ok, naive solution:
        long start = (long) Math.pow(10, nDigits - 1);
        long end = 0;
        for (int i = 0; i < nDigits; i++) {
            end *= 10;
            end += 9;
        }

        long max = 0;

        long a = end;
        while (a >= start) {
            long b = end;
            while (b >= a) {
                long product = a * b;
                if (isPalindrome(product) && product > max)
                    max = product;
                b--;
            }
            a--;
        }
        return max;

        // we can apparently also optimize by using the 11 multiple fact

        // back to the good stuff, the incomprehensible euler stuff:
        // xy
        // P=1000x+100y+10y+x
        // P=1001x+110y
        // P=(91x+10y)11
        // xyz
        // P=100000x10000y1000z100z10yx
        // P=100001x10010y1100z
        // P=119091x910y100z
        // wxyz
        // P=10000000w+1000000x+100000y+10000z+1000z+100y+10x+w
        // P=10000001w+1000010x+100100y+11000z
        // P=(909091w+90910x+9100y+1000z)11
    }

    boolean isPalindrome(long num) {
        long reverse = 0;
        long copy = num;
        while (copy > 0) {
            reverse *= 10;
            reverse += copy % 10;
            copy /= 10;
        }
        return num == reverse;
    }

    @ParameterizedTest
    @CsvSource({
            "1,9",
            "2,9009",
            "3,906609",
            // "4,99000099",
            // "5,9966006699",
    })
    void test_problemFour(int size, long expected) {
        assertEquals(expected, problemFour(size));
    }

    @ParameterizedTest
    @CsvSource({
            "true,4",
            "true,44",
            "false,445",
            "true,5445",
            "false,1234",
    })
    void test_isPalindrome(boolean expected, int input) {
        assertEquals(expected, isPalindrome(input));
    }

    /**
     * smallest multiple
     */
    int problem5(int upTo) {
        int next = upTo * upTo;
        // try to reduce the amount of tests on each multiple of largest number (upTo)
        // boolean[] yes = new boolean[upTo];
        // Arrays.fill(yes, true);
        //
        // List<Integer> numsToTry = new ArrayList<>();
        // for (int i = upTo - 1; i > 0; i--) {
        //     if (!yes[i]) continue;
        //     for (int j = 2; j < i; j++) {
        //         if (i % j == 0) {
        //             yes[j] = false;
        //         }
        //     }
        // }
        //
        // for (int i = 2; i < upTo; i++) {
        //     if (yes[i])
        //         numsToTry.add(i);
        // }
        //
        // but as it turns out, it is just the larger half
        // System.out.println(numsToTry);
        var numsToTry = IntStream.rangeClosed(upTo / 2, upTo).toArray();

        int limit = Integer.MAX_VALUE;
        while (limit-- > 0) {
            boolean even = true;
            for (int i : numsToTry) {
                if (next % i != 0) {
                    even = false;
                    break;
                }
            }

            if (even) return next;
            next += upTo;
        }
        return -1;
    }

    @ParameterizedTest
    @CsvSource({
            "10,2520",
            "20,232792560",
    })
    void test_problem5(int upTo, int expected) {
        assertEquals(expected, problem5(upTo));
    }

    int problemSix(int upTo) {
        var squareOfSum = Math.pow(IntStream.rangeClosed(1, upTo).sum(), 2);
        var sumOfSquare = IntStream.rangeClosed(1, upTo).map(i -> i * i).sum();

        return (int) (squareOfSum - sumOfSquare);
    }

    @ParameterizedTest
    @CsvSource({
            "10,2640",
            "100,25164150",
    })
    void test_problemSix(int upTo, int expected) {
        assertEquals(expected, problemSix(upTo));
    }

    /**
     * @param n how many nums to generate
     * @return nth prime
     */
    int problemSeven(int n) {
        if (PROBLEM_SEVEN == null)
            PROBLEM_SEVEN = sieveOfEratosthenes(nPrimesErHelper_piN(10_000));
        for (int i = 2; i < PROBLEM_SEVEN.length; i++) {
            if (PROBLEM_SEVEN[i]) n--;
            if (n == 0) return i;
        }
        throw new IllegalStateException("not found");
    }

    @ParameterizedTest
    @CsvSource({
            "1,2",
            "2,3",
            "3,5",
            "4,7",
            "5,11",
            "6,13",
            "10001,104743",
    })
    void test_problemSeven(int n, int nthPrime) {
        assertEquals(nthPrime, problemSeven(n));
    }

    //<editor-fold desc="Primes: Simple G4G approach">
    List<Integer> nPrimes(int n) {
        List<Integer> result = new ArrayList<>();
        outer:
        // start at 2
        for (int i = 2; ; i++) {
            // each go from i to i/2, checking if any divide
            for (int j = 2; j <= i / 2; ++j) {
                if (i % j == 0) {
                    continue outer;
                }
            }
            result.add(i);
            if (result.size() == n)
                break;
        }

        return result;
    }

    int nthPrime(int n) {
        int counter = 0;
        outer:
        // start at 2
        for (int i = 2; ; i++) {
            // each go from i to i/2, checking if any divide
            for (int j = 2; j <= i / 2; ++j) {
                if (i % j == 0) {
                    continue outer;
                }
            }
            counter++;
            if (counter == n)
                return i;
        }
    }

    @Test
    void test_nPrimes() {
        assertEquals(List.of(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43), nPrimes(14));
        assertEquals(43, nthPrime(14));
    }

    // https://www.geeksforgeeks.org/java-program-to-display-all-prime-numbers-from-1-to-n/
    @SuppressWarnings("unused")
    void prime_N(int N) {
        // Declaring the variables
        int x, y, flg;

        // Using for loop for traversing all
        // the numbers from 1 to N
        for (x = 1; x <= N; x++) {

            // Omit 0 and 1 as they are
            // neither prime nor composite
            if (x == 1 || x == 0)
                continue;

            // Using flag variable to check
            // if x is prime or not
            flg = 1;

            for (y = 2; y <= x / 2; ++y) {
                if (x % y == 0) {
                    flg = 0;
                    break;
                }
            }

            // If flag is 1 then x is prime but
            // if flag is 0 then x is not prime
            if (flg == 1)
                System.out.println(x);
        }
    }
    //</editor-fold>

    //<editor-fold desc="Primes: Eratosthenes G4G approach">
    int nPrimesErHelper_piN(int n) {
        // https://en.wikipedia.org/wiki/Prime_number_theorem#Approximations_for_the_nth_prime_number
        // https://math.stackexchange.com/questions/4535527/heuristic-argument-on-the-position-of-nth-prime
        return (int) (1.5 * n * Math.log(n));
    }

    @ParameterizedTest
    @CsvSource({
            "1,2", // 4 = pi(n), or how many primes before 10,
            "2,541", // 25 = pi(100),
            "3,7919", // 168 = pi(1000),
            "4,104729", // 1229,
            "5,1299709", // 9592,
            "6,15485863", // 78498,
            "7,179424673", // 664579,
    })
    void test_nPrimesErHelper_piN(int power, int nthPrime) {
        int n = (int) Math.pow(10, power);
        assertTrue(nthPrime < nPrimesErHelper_piN(n),
                "oh no - our helper was not greater than the actual number of the nth prime");
    }

    List<Integer> nPrimesEr(int n) {
        int size = nPrimesErHelper_piN(n);
        List<Integer> integers = new ArrayList<>();
        var s = sieveOfEratosthenes(size);
        for (int i = 2; i < s.length; i++) if (s[i]) integers.add(i);
        return integers.subList(0, n);
    }

    @Test
    void test_nPrimesEr() {
        assertEquals(List.of(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43), nPrimesEr(14));
        assertEquals(43, nthPrimeEr(14));
    }

    int nthPrimeEr(int n) {
        int size = nPrimesErHelper_piN(n);
        List<Integer> integers = new ArrayList<>();
        var s = sieveOfEratosthenes(size);
        for (int i = 2; i < s.length; i++) if (s[i]) integers.add(i);
        return integers.get(n - 1);
    }

    boolean[] sieveOfEratosthenes(int n) {
        boolean[] prime = new boolean[n + 1];
        Arrays.fill(prime, true);

        // i from 2 to sqrt n
        for (int i = 2; i * i <= n; i++) {
            // if i is prime
            if (prime[i]) {
                // j from i squared to all multiples of i - not prime
                for (int j = i * i; j <= n; j += i) {
                    prime[j] = false;
                }
            }
        }

        // Print all prime numbers
        // for (int i = 2; i <= n; i++) if (prime[i]) System.out.print(i + " ");
        return prime;
    }
    //</editor-fold>

    long problem8(int length) {
        String input = """
                73167176531330624919225119674426574742355349194934
                96983520312774506326239578318016984801869478851843
                85861560789112949495459501737958331952853208805511
                12540698747158523863050715693290963295227443043557
                66896648950445244523161731856403098711121722383113
                62229893423380308135336276614282806444486645238749
                30358907296290491560440772390713810515859307960866
                70172427121883998797908792274921901699720888093776
                65727333001053367881220235421809751254540594752243
                52584907711670556013604839586446706324415722155397
                53697817977846174064955149290862569321978468622482
                83972241375657056057490261407972968652414535100474
                82166370484403199890008895243450658541227588666881
                16427171479924442928230863465674813919123162824586
                17866458359124566529476545682848912883142607690042
                24219022671055626321111109370544217506941658960408
                07198403850962455444362981230987879927244284909188
                84580156166097919133875499200524063689912560717606
                05886116467109405077541002256983155200055935729725
                71636269561882670428252483600823257530420752963450""";

        long greatestProduct = 1;

        var chars = input.replaceAll("\\s", "").toCharArray();
        for (int i = 0; i < chars.length - (length - 1); i++) {
            long product = 1;
            for (int j = 0; j < length; j++) {
                product *= (chars[i + j] - '0');
            }

            if (product > greatestProduct)
                greatestProduct = product;
        }

        return greatestProduct;
    }

    @ParameterizedTest
    @CsvSource({
            "4,5832",
            "5,40824",
            "6,285768",
            "13,23514624000",
    })
    void test_problem8(int length, long expect) {
        assertEquals(expect, problem8(length));
    }

    int problem9() {
        for (int i = 0; i < 1000; i++) {
            for (int j = 0; j < 1000; j++) {
                if (j == i) continue;
                for (int k = 0; k < 1000; k++) {
                    if (k == i || k == j) continue;

                    if (i * i + j * j != k * k) continue;

                    if (i + j + k == 1000) {
                        System.out.println(i); // 200
                        System.out.println(j); // 375
                        System.out.println(k); // 425

                        return i * j * k;
                    }
                }
            }
        }
        throw new IllegalStateException("not found");
    }

    @Test
    void test_problem9() {
        assertEquals(31875000, problem9());
    }

    long problem10_naive(int n) {
        long result = 0;
        outer:
        // start at 2
        for (int i = 2; i <= n; i++) {
            // each go from i to i/2, checking if any divide
            for (int j = 2; j <= i / 2; ++j) {
                if (i % j == 0) {
                    continue outer;
                }
            }
            result += i;
        }

        return result;
    }

    // sum of primes below n
    long problem10(int n) {
        boolean[] prime = new boolean[n + 1];
        Arrays.fill(prime, true);

        // i from 2 to sqrt n
        for (int i = 2; i * i <= n; i++) {
            // if i is prime
            if (prime[i]) {
                // j from i squared to all multiples of i - not prime
                for (int j = i * i; j <= n; j += i) {
                    prime[j] = false;
                }
            }
        }

        long result = 0;
        for (int i = 2; i < prime.length; i++) {
            if (prime[i]) {
                result += i;
            }
        }
        return result;
    }

    @ParameterizedTest
    @CsvSource({
            "10,17",
            "43,281",
            "2000000,142913828922",
    })
    void test_problem10(int n, long expected) {
        assertEquals(expected, problem10(n));
        if (n < 100)
            assertEquals(expected, problem10_naive(n));
    }

    int problem11() {
        return problem11(4);
    }

    int problem11(int length) {
        String input = """
                08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
                49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
                81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
                52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
                22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
                24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
                32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
                67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
                24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
                21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
                78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
                16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
                86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
                19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
                04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
                88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
                04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
                20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
                20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
                01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48""";

        var lines = input.split("\r?");
        int[][] numbers = new int[lines.length][lines[0].split(" ").length];

        for (int i = 0; i < lines.length; i++) {
            String line = lines[i];
            int pointer = 0;
            for (String s : line.split(" ")) {
                numbers[i][pointer++] = Integer.parseInt(s);
            }
        }

        var directions = new int[][]{
                {0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}, {-1, 0}, {-1, 1}
        };

        int greatestProduct = 1;
        for (int i = 0; i < numbers.length; i++) {
            var line = numbers[i];
            for (int j = 0; j < line.length; j++) {

                for (int[] direction : directions) {
                    var di = direction[0];
                    var dj = direction[1];

                    var product = 1;
                    for (int l = 0; l < length; l++) {
                        int iTarget = i + (di * l);
                        int jTarget = j + (dj * l);

                        // check if we are out of bounds
                        if (iTarget < 0 || iTarget >= numbers.length || jTarget < 0 || jTarget >= line.length) {
                            break;
                        }

                        int nextNum = numbers[iTarget][jTarget];
                        product *= nextNum;
                    }

                    if (product > greatestProduct)
                        greatestProduct = product;
                }
            }
        }

        return greatestProduct;
    }

    @Test
    void test_problem11() {
        assertEquals(70600674, problem11());
    }

    // Highly Divisible Triangular Number
    int problem12_naive(int n) {
        int number = 1;

        int triangleDelta = number;
        for (; ; ) {
            int next = number + ++triangleDelta;

            Set<Integer> factors = new HashSet<>();
            for (int j = next; j > 0; j--) {
                if (next % j == 0) {
                    factors.add(j);
                }
            }

            if (factors.size() >= n)
                return next;
            // else System.out.println("not stopping at %s with %s factors: %s".formatted(next, factors.size(), factors));

            number = next;
        }
    }

    int problem12(int input) {
        int nthTriangleNumber = 3;
        int divisorsOfN = 2;
        int counter = 0;

        var primeArray = nPrimes(nPrimesErHelper_piN(1000)).stream().mapToInt(Integer::intValue).toArray();

        int n1, divisorsOfN1, exponent;
        while (counter <= input) {
            nthTriangleNumber += 1;
            n1 = nthTriangleNumber;
            if (n1 % 2 == 0) n1 = n1 / 2;
            divisorsOfN1 = 1;
            for (int p : primeArray) {
                if (p * p > n1) {
                    divisorsOfN1 *= 2;
                    break;
                }

                exponent = 1;
                while (n1 % p == 0) {
                    exponent++;
                    n1 = n1 / p;
                }

                if (exponent > 1) divisorsOfN1 *= exponent;
                if (n1 == 1) break;
            }
            counter = divisorsOfN * divisorsOfN1;
            divisorsOfN = divisorsOfN1;
        }

        return nthTriangleNumber * (nthTriangleNumber - 1) / 2;
    }

    @ParameterizedTest
    @CsvSource({
            "5,28",
            "50,25200",
            "500,76576500",
    })
    void test_problem12(int n, int expected) {
        if (n < 100)
            assertEquals(expected, problem12_naive(n));
        assertEquals(expected, problem12(n));
    }

    /**
     * Large Sum
     * <p>
     * Work out first ten digits of the sum of the following one-hundred 50-digit numbers
     */
    String problem13() {
        String input = """
                37107287533902102798797998220837590246510135740250
                46376937677490009712648124896970078050417018260538
                74324986199524741059474233309513058123726617309629
                91942213363574161572522430563301811072406154908250
                23067588207539346171171980310421047513778063246676
                89261670696623633820136378418383684178734361726757
                28112879812849979408065481931592621691275889832738
                44274228917432520321923589422876796487670272189318
                47451445736001306439091167216856844588711603153276
                70386486105843025439939619828917593665686757934951
                62176457141856560629502157223196586755079324193331
                64906352462741904929101432445813822663347944758178
                92575867718337217661963751590579239728245598838407
                58203565325359399008402633568948830189458628227828
                80181199384826282014278194139940567587151170094390
                35398664372827112653829987240784473053190104293586
                86515506006295864861532075273371959191420517255829
                71693888707715466499115593487603532921714970056938
                54370070576826684624621495650076471787294438377604
                53282654108756828443191190634694037855217779295145
                36123272525000296071075082563815656710885258350721
                45876576172410976447339110607218265236877223636045
                17423706905851860660448207621209813287860733969412
                81142660418086830619328460811191061556940512689692
                51934325451728388641918047049293215058642563049483
                62467221648435076201727918039944693004732956340691
                15732444386908125794514089057706229429197107928209
                55037687525678773091862540744969844508330393682126
                18336384825330154686196124348767681297534375946515
                80386287592878490201521685554828717201219257766954
                78182833757993103614740356856449095527097864797581
                16726320100436897842553539920931837441497806860984
                48403098129077791799088218795327364475675590848030
                87086987551392711854517078544161852424320693150332
                59959406895756536782107074926966537676326235447210
                69793950679652694742597709739166693763042633987085
                41052684708299085211399427365734116182760315001271
                65378607361501080857009149939512557028198746004375
                35829035317434717326932123578154982629742552737307
                94953759765105305946966067683156574377167401875275
                88902802571733229619176668713819931811048770190271
                25267680276078003013678680992525463401061632866526
                36270218540497705585629946580636237993140746255962
                24074486908231174977792365466257246923322810917141
                91430288197103288597806669760892938638285025333403
                34413065578016127815921815005561868836468420090470
                23053081172816430487623791969842487255036638784583
                11487696932154902810424020138335124462181441773470
                63783299490636259666498587618221225225512486764533
                67720186971698544312419572409913959008952310058822
                95548255300263520781532296796249481641953868218774
                76085327132285723110424803456124867697064507995236
                37774242535411291684276865538926205024910326572967
                23701913275725675285653248258265463092207058596522
                29798860272258331913126375147341994889534765745501
                18495701454879288984856827726077713721403798879715
                38298203783031473527721580348144513491373226651381
                34829543829199918180278916522431027392251122869539
                40957953066405232632538044100059654939159879593635
                29746152185502371307642255121183693803580388584903
                41698116222072977186158236678424689157993532961922
                62467957194401269043877107275048102390895523597457
                23189706772547915061505504953922979530901129967519
                86188088225875314529584099251203829009407770775672
                11306739708304724483816533873502340845647058077308
                82959174767140363198008187129011875491310547126581
                97623331044818386269515456334926366572897563400500
                42846280183517070527831839425882145521227251250327
                55121603546981200581762165212827652751691296897789
                32238195734329339946437501907836945765883352399886
                75506164965184775180738168837861091527357929701337
                62177842752192623401942399639168044983993173312731
                32924185707147349566916674687634660915035914677504
                99518671430235219628894890102423325116913619626622
                73267460800591547471830798392868535206946944540724
                76841822524674417161514036427982273348055556214818
                97142617910342598647204516893989422179826088076852
                87783646182799346313767754307809363333018982642090
                10848802521674670883215120185883543223812876952786
                71329612474782464538636993009049310363619763878039
                62184073572399794223406235393808339651327408011116
                66627891981488087797941876876144230030984490851411
                60661826293682836764744779239180335110989069790714
                85786944089552990653640447425576083659976645795096
                66024396409905389607120198219976047599490197230297
                64913982680032973156037120041377903785566085089252
                16730939319872750275468906903707539413042652315011
                94809377245048795150954100921645863754710598436791
                78639167021187492431995700641917969777599028300699
                15368713711936614952811305876380278410754449733078
                40789923115535562561142322423255033685442488917353
                44889911501440648020369068063960672322193204149535
                41503128880339536053299340368006977710650566631954
                81234880673210146739058568557934581403627822703280
                82616570773948327592232845941706525094512325230608
                22918802058777319719839450180888072429661980811197
                77158542502016545090413245809786882778948721859617
                72107838435069186155435662884062257473692284509516
                20849603980134001723930671666823555245252804609722
                53503534226472524250874054075591789781264330331690""";

        String[] lines = input.split("\r?");

        // ?? surely not what was meant
        return Arrays.stream(lines).map(BigInteger::new).reduce(BigInteger::add).orElseThrow().toString().substring(0, 10);
    }

    @Test
    void test_problem13() {
        assertEquals("5537376230", problem13());
    }

    long problem14_longestChainUnderMillion() {
        int max = 1_000_000;
        HashMap<Long, Long> map = HashMap.newHashMap(max);

        long longest = 1;
        long longestKey = -1;
        for (long i = 1; i < max; i++) {
            var mapValue = map.get(i);
            long chainLength;
            if (mapValue != null) chainLength = mapValue;
            else chainLength = problem14_intermediate(map, i);
            if (chainLength > longest) {
                longest = chainLength;
                longestKey = i;
            }
        }
        return longestKey;
    }

    long problem14_intermediate(Map<Long, Long> map, long key) {
        if (key == 1) {
            return 0;
        }

        var mapValue = map.get(key);
        if (mapValue != null) return mapValue;
        boolean isEven = key % 2 == 0;
        long value;
        long next;
        if (isEven) {
            next = key / 2;
        } else {
            next = (3 * key) + 1;
        }

        value = 1 + problem14_intermediate(map, next);
        map.put(key, value);
        return value;
    }

    @Test
    void test_problem14_intermediate() {
        assertEquals(9, problem14_intermediate(new HashMap<>(), 13));
    }

    @Test
    void test_problem14() {
        assertEquals(837799, problem14_longestChainUnderMillion());
    }

    /**
     * Starting in the top left corner of a 2×2 grid,
     * and only being able to move to the right and down,
     * there are exactly 6 routes to the bottom right corner.
     *
     * @return How many such routes are there through a 20×20 grid?
     */
    int problem15(int dim) {
        return problem15(dim, new ArrayList<>(), 0, 0);
    }

    int problem15(int dim, List<Boolean> choices, int row, int col) {
        if (row == dim && col == dim) {
            // System.out.println(choices);
            return 1;
        }

        int totalRoutes = 0;

        // Move right if within bounds and not already chosen.
        if (col < dim) {
            choices.add(true);
            totalRoutes += problem15(dim, choices, row, col + 1);
            choices.removeLast();
        }

        // Move down if within bounds and not already chosen.
        if (row < dim) {
            choices.add(false);
            totalRoutes += problem15(dim, choices, row + 1, col);
            choices.removeLast();
        }

        return totalRoutes;
    }

    @ParameterizedTest
    @CsvSource({
            // example from webpage
            "2,6",
            // more examples to test an efficient solution
            "3,20",
            "4,70",
            "5,252",
            // the actual problem
            // "20,1",
    })
    void test_problem15(int dim, int expect) {
        assertEquals(expect, problem15(dim));
    }
}
