# coding: utf-8

"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.45) is used. For example, calling `/info` is the same as calling `/v1.45/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 

    The version of the OpenAPI document: 1.45
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from docker_client.generated.docker_client.generated.models.commit import Commit
from docker_client.generated.docker_client.generated.models.generic_resources_inner import GenericResourcesInner
from docker_client.generated.docker_client.generated.models.plugins_info import PluginsInfo
from docker_client.generated.docker_client.generated.models.registry_service_config import RegistryServiceConfig
from docker_client.generated.docker_client.generated.models.runtime import Runtime
from docker_client.generated.docker_client.generated.models.swarm_info import SwarmInfo
from docker_client.generated.docker_client.generated.models.system_info_default_address_pools_inner import SystemInfoDefaultAddressPoolsInner
from typing import Optional, Set
from typing_extensions import Self

class SystemInfo(BaseModel):
    """
    SystemInfo
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable. ", alias="ID")
    containers: Optional[StrictInt] = Field(default=None, description="Total number of containers on the host.", alias="Containers")
    containers_running: Optional[StrictInt] = Field(default=None, description="Number of containers with status `\"running\"`. ", alias="ContainersRunning")
    containers_paused: Optional[StrictInt] = Field(default=None, description="Number of containers with status `\"paused\"`. ", alias="ContainersPaused")
    containers_stopped: Optional[StrictInt] = Field(default=None, description="Number of containers with status `\"stopped\"`. ", alias="ContainersStopped")
    images: Optional[StrictInt] = Field(default=None, description="Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. ", alias="Images")
    driver: Optional[StrictStr] = Field(default=None, description="Name of the storage driver in use.", alias="Driver")
    driver_status: Optional[List[List[StrictStr]]] = Field(default=None, description="Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice. ", alias="DriverStatus")
    docker_root_dir: Optional[StrictStr] = Field(default=None, description="Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows. ", alias="DockerRootDir")
    plugins: Optional[PluginsInfo] = Field(default=None, alias="Plugins")
    memory_limit: Optional[StrictBool] = Field(default=None, description="Indicates if the host has memory limit support enabled.", alias="MemoryLimit")
    swap_limit: Optional[StrictBool] = Field(default=None, description="Indicates if the host has memory swap limit support enabled.", alias="SwapLimit")
    kernel_memory_tcp: Optional[StrictBool] = Field(default=None, description="Indicates if the host has kernel memory TCP limit support enabled. This field is omitted if not supported.  Kernel memory TCP limits are not supported when using cgroups v2, which does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup. ", alias="KernelMemoryTCP")
    cpu_cfs_period: Optional[StrictBool] = Field(default=None, description="Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. ", alias="CpuCfsPeriod")
    cpu_cfs_quota: Optional[StrictBool] = Field(default=None, description="Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. ", alias="CpuCfsQuota")
    cpu_shares: Optional[StrictBool] = Field(default=None, description="Indicates if CPU Shares limiting is supported by the host. ", alias="CPUShares")
    cpu_set: Optional[StrictBool] = Field(default=None, description="Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) ", alias="CPUSet")
    pids_limit: Optional[StrictBool] = Field(default=None, description="Indicates if the host kernel has PID limit support enabled.", alias="PidsLimit")
    oom_kill_disable: Optional[StrictBool] = Field(default=None, description="Indicates if OOM killer disable is supported on the host.", alias="OomKillDisable")
    ipv4_forwarding: Optional[StrictBool] = Field(default=None, description="Indicates IPv4 forwarding is enabled.", alias="IPv4Forwarding")
    bridge_nf_iptables: Optional[StrictBool] = Field(default=None, description="Indicates if `bridge-nf-call-iptables` is available on the host.", alias="BridgeNfIptables")
    bridge_nf_ip6tables: Optional[StrictBool] = Field(default=None, description="Indicates if `bridge-nf-call-ip6tables` is available on the host.", alias="BridgeNfIp6tables")
    debug: Optional[StrictBool] = Field(default=None, description="Indicates if the daemon is running in debug-mode / with debug-level logging enabled. ", alias="Debug")
    nfd: Optional[StrictInt] = Field(default=None, description="The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled. ", alias="NFd")
    n_goroutines: Optional[StrictInt] = Field(default=None, description="The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. ", alias="NGoroutines")
    system_time: Optional[StrictStr] = Field(default=None, description="Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. ", alias="SystemTime")
    logging_driver: Optional[StrictStr] = Field(default=None, description="The logging driver to use as a default for new containers. ", alias="LoggingDriver")
    cgroup_driver: Optional[StrictStr] = Field(default='cgroupfs', description="The driver to use for managing cgroups. ", alias="CgroupDriver")
    cgroup_version: Optional[StrictStr] = Field(default='1', description="The version of the cgroup. ", alias="CgroupVersion")
    n_events_listener: Optional[StrictInt] = Field(default=None, description="Number of event listeners subscribed.", alias="NEventsListener")
    kernel_version: Optional[StrictStr] = Field(default=None, description="Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_. ", alias="KernelVersion")
    operating_system: Optional[StrictStr] = Field(default=None, description="Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\" ", alias="OperatingSystem")
    os_version: Optional[StrictStr] = Field(default=None, description="Version of the host's operating system  <p><br /></p>  > **Note**: The information returned in this field, including its > very existence, and the formatting of values, should not be considered > stable, and may change without notice. ", alias="OSVersion")
    os_type: Optional[StrictStr] = Field(default=None, description="Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment). ", alias="OSType")
    architecture: Optional[StrictStr] = Field(default=None, description="Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment). ", alias="Architecture")
    ncpu: Optional[StrictInt] = Field(default=None, description="The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected. ", alias="NCPU")
    mem_total: Optional[StrictInt] = Field(default=None, description="Total amount of physical memory available on the host, in bytes. ", alias="MemTotal")
    index_server_address: Optional[StrictStr] = Field(default='https://index.docker.io/v1/', description="Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud. ", alias="IndexServerAddress")
    registry_config: Optional[RegistryServiceConfig] = Field(default=None, alias="RegistryConfig")
    generic_resources: Optional[List[GenericResourcesInner]] = Field(default=None, description="User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`). ", alias="GenericResources")
    http_proxy: Optional[StrictStr] = Field(default=None, description="HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. ", alias="HttpProxy")
    https_proxy: Optional[StrictStr] = Field(default=None, description="HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. ", alias="HttpsProxy")
    no_proxy: Optional[StrictStr] = Field(default=None, description="Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. ", alias="NoProxy")
    name: Optional[StrictStr] = Field(default=None, description="Hostname of the host.", alias="Name")
    labels: Optional[List[StrictStr]] = Field(default=None, description="User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm. ", alias="Labels")
    experimental_build: Optional[StrictBool] = Field(default=None, description="Indicates if experimental features are enabled on the daemon. ", alias="ExperimentalBuild")
    server_version: Optional[StrictStr] = Field(default=None, description="Version string of the daemon. ", alias="ServerVersion")
    runtimes: Optional[Dict[str, Runtime]] = Field(default=None, description="List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here. ", alias="Runtimes")
    default_runtime: Optional[StrictStr] = Field(default='runc', description="Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time. ", alias="DefaultRuntime")
    swarm: Optional[SwarmInfo] = Field(default=None, alias="Swarm")
    live_restore_enabled: Optional[StrictBool] = Field(default=False, description="Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected. ", alias="LiveRestoreEnabled")
    isolation: Optional[StrictStr] = Field(default='default', description="Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms. ", alias="Isolation")
    init_binary: Optional[StrictStr] = Field(default=None, description="Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. ", alias="InitBinary")
    containerd_commit: Optional[Commit] = Field(default=None, alias="ContainerdCommit")
    runc_commit: Optional[Commit] = Field(default=None, alias="RuncCommit")
    init_commit: Optional[Commit] = Field(default=None, alias="InitCommit")
    security_options: Optional[List[StrictStr]] = Field(default=None, description="List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), rootless and no-new-privileges.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs. ", alias="SecurityOptions")
    product_license: Optional[StrictStr] = Field(default=None, description="Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included. ", alias="ProductLicense")
    default_address_pools: Optional[List[SystemInfoDefaultAddressPoolsInner]] = Field(default=None, description="List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools. ", alias="DefaultAddressPools")
    warnings: Optional[List[StrictStr]] = Field(default=None, description="List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user. ", alias="Warnings")
    cdi_spec_dirs: Optional[List[StrictStr]] = Field(default=None, description="List of directories where (Container Device Interface) CDI specifications are located.  These specifications define vendor-specific modifications to an OCI runtime specification for a container being created.  An empty list indicates that CDI device injection is disabled.  Note that since using CDI device injection requires the daemon to have experimental enabled. For non-experimental daemons an empty list will always be returned. ", alias="CDISpecDirs")
    __properties: ClassVar[List[str]] = ["ID", "Containers", "ContainersRunning", "ContainersPaused", "ContainersStopped", "Images", "Driver", "DriverStatus", "DockerRootDir", "Plugins", "MemoryLimit", "SwapLimit", "KernelMemoryTCP", "CpuCfsPeriod", "CpuCfsQuota", "CPUShares", "CPUSet", "PidsLimit", "OomKillDisable", "IPv4Forwarding", "BridgeNfIptables", "BridgeNfIp6tables", "Debug", "NFd", "NGoroutines", "SystemTime", "LoggingDriver", "CgroupDriver", "CgroupVersion", "NEventsListener", "KernelVersion", "OperatingSystem", "OSVersion", "OSType", "Architecture", "NCPU", "MemTotal", "IndexServerAddress", "RegistryConfig", "GenericResources", "HttpProxy", "HttpsProxy", "NoProxy", "Name", "Labels", "ExperimentalBuild", "ServerVersion", "Runtimes", "DefaultRuntime", "Swarm", "LiveRestoreEnabled", "Isolation", "InitBinary", "ContainerdCommit", "RuncCommit", "InitCommit", "SecurityOptions", "ProductLicense", "DefaultAddressPools", "Warnings", "CDISpecDirs"]

    @field_validator('cgroup_driver')
    def cgroup_driver_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['cgroupfs', 'systemd', 'none']):
            raise ValueError("must be one of enum values ('cgroupfs', 'systemd', 'none')")
        return value

    @field_validator('cgroup_version')
    def cgroup_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1', '2']):
            raise ValueError("must be one of enum values ('1', '2')")
        return value

    @field_validator('isolation')
    def isolation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default', 'hyperv', 'process']):
            raise ValueError("must be one of enum values ('default', 'hyperv', 'process')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SystemInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of plugins
        if self.plugins:
            _dict['Plugins'] = self.plugins.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registry_config
        if self.registry_config:
            _dict['RegistryConfig'] = self.registry_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in generic_resources (list)
        _items = []
        if self.generic_resources:
            for _item_generic_resources in self.generic_resources:
                if _item_generic_resources:
                    _items.append(_item_generic_resources.to_dict())
            _dict['GenericResources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in runtimes (dict)
        _field_dict = {}
        if self.runtimes:
            for _key_runtimes in self.runtimes:
                if self.runtimes[_key_runtimes]:
                    _field_dict[_key_runtimes] = self.runtimes[_key_runtimes].to_dict()
            _dict['Runtimes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of swarm
        if self.swarm:
            _dict['Swarm'] = self.swarm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of containerd_commit
        if self.containerd_commit:
            _dict['ContainerdCommit'] = self.containerd_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runc_commit
        if self.runc_commit:
            _dict['RuncCommit'] = self.runc_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of init_commit
        if self.init_commit:
            _dict['InitCommit'] = self.init_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in default_address_pools (list)
        _items = []
        if self.default_address_pools:
            for _item_default_address_pools in self.default_address_pools:
                if _item_default_address_pools:
                    _items.append(_item_default_address_pools.to_dict())
            _dict['DefaultAddressPools'] = _items
        # set to None if registry_config (nullable) is None
        # and model_fields_set contains the field
        if self.registry_config is None and "registry_config" in self.model_fields_set:
            _dict['RegistryConfig'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SystemInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ID": obj.get("ID"),
            "Containers": obj.get("Containers"),
            "ContainersRunning": obj.get("ContainersRunning"),
            "ContainersPaused": obj.get("ContainersPaused"),
            "ContainersStopped": obj.get("ContainersStopped"),
            "Images": obj.get("Images"),
            "Driver": obj.get("Driver"),
            "DriverStatus": obj.get("DriverStatus"),
            "DockerRootDir": obj.get("DockerRootDir"),
            "Plugins": PluginsInfo.from_dict(obj["Plugins"]) if obj.get("Plugins") is not None else None,
            "MemoryLimit": obj.get("MemoryLimit"),
            "SwapLimit": obj.get("SwapLimit"),
            "KernelMemoryTCP": obj.get("KernelMemoryTCP"),
            "CpuCfsPeriod": obj.get("CpuCfsPeriod"),
            "CpuCfsQuota": obj.get("CpuCfsQuota"),
            "CPUShares": obj.get("CPUShares"),
            "CPUSet": obj.get("CPUSet"),
            "PidsLimit": obj.get("PidsLimit"),
            "OomKillDisable": obj.get("OomKillDisable"),
            "IPv4Forwarding": obj.get("IPv4Forwarding"),
            "BridgeNfIptables": obj.get("BridgeNfIptables"),
            "BridgeNfIp6tables": obj.get("BridgeNfIp6tables"),
            "Debug": obj.get("Debug"),
            "NFd": obj.get("NFd"),
            "NGoroutines": obj.get("NGoroutines"),
            "SystemTime": obj.get("SystemTime"),
            "LoggingDriver": obj.get("LoggingDriver"),
            "CgroupDriver": obj.get("CgroupDriver") if obj.get("CgroupDriver") is not None else 'cgroupfs',
            "CgroupVersion": obj.get("CgroupVersion") if obj.get("CgroupVersion") is not None else '1',
            "NEventsListener": obj.get("NEventsListener"),
            "KernelVersion": obj.get("KernelVersion"),
            "OperatingSystem": obj.get("OperatingSystem"),
            "OSVersion": obj.get("OSVersion"),
            "OSType": obj.get("OSType"),
            "Architecture": obj.get("Architecture"),
            "NCPU": obj.get("NCPU"),
            "MemTotal": obj.get("MemTotal"),
            "IndexServerAddress": obj.get("IndexServerAddress") if obj.get("IndexServerAddress") is not None else 'https://index.docker.io/v1/',
            "RegistryConfig": RegistryServiceConfig.from_dict(obj["RegistryConfig"]) if obj.get("RegistryConfig") is not None else None,
            "GenericResources": [GenericResourcesInner.from_dict(_item) for _item in obj["GenericResources"]] if obj.get("GenericResources") is not None else None,
            "HttpProxy": obj.get("HttpProxy"),
            "HttpsProxy": obj.get("HttpsProxy"),
            "NoProxy": obj.get("NoProxy"),
            "Name": obj.get("Name"),
            "Labels": obj.get("Labels"),
            "ExperimentalBuild": obj.get("ExperimentalBuild"),
            "ServerVersion": obj.get("ServerVersion"),
            "Runtimes": dict(
                (_k, Runtime.from_dict(_v))
                for _k, _v in obj["Runtimes"].items()
            )
            if obj.get("Runtimes") is not None
            else None,
            "DefaultRuntime": obj.get("DefaultRuntime") if obj.get("DefaultRuntime") is not None else 'runc',
            "Swarm": SwarmInfo.from_dict(obj["Swarm"]) if obj.get("Swarm") is not None else None,
            "LiveRestoreEnabled": obj.get("LiveRestoreEnabled") if obj.get("LiveRestoreEnabled") is not None else False,
            "Isolation": obj.get("Isolation") if obj.get("Isolation") is not None else 'default',
            "InitBinary": obj.get("InitBinary"),
            "ContainerdCommit": Commit.from_dict(obj["ContainerdCommit"]) if obj.get("ContainerdCommit") is not None else None,
            "RuncCommit": Commit.from_dict(obj["RuncCommit"]) if obj.get("RuncCommit") is not None else None,
            "InitCommit": Commit.from_dict(obj["InitCommit"]) if obj.get("InitCommit") is not None else None,
            "SecurityOptions": obj.get("SecurityOptions"),
            "ProductLicense": obj.get("ProductLicense"),
            "DefaultAddressPools": [SystemInfoDefaultAddressPoolsInner.from_dict(_item) for _item in obj["DefaultAddressPools"]] if obj.get("DefaultAddressPools") is not None else None,
            "Warnings": obj.get("Warnings"),
            "CDISpecDirs": obj.get("CDISpecDirs")
        })
        return _obj


