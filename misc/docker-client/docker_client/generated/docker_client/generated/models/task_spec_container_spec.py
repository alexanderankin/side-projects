# coding: utf-8

"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.45) is used. For example, calling `/info` is the same as calling `/v1.45/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 

    The version of the OpenAPI document: 1.45
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from docker_client.generated.models.health_config import HealthConfig
from docker_client.generated.models.mount import Mount
from docker_client.generated.models.resources_ulimits_inner import ResourcesUlimitsInner
from docker_client.generated.models.task_spec_container_spec_configs_inner import TaskSpecContainerSpecConfigsInner
from docker_client.generated.models.task_spec_container_spec_dns_config import TaskSpecContainerSpecDNSConfig
from docker_client.generated.models.task_spec_container_spec_privileges import TaskSpecContainerSpecPrivileges
from docker_client.generated.models.task_spec_container_spec_secrets_inner import TaskSpecContainerSpecSecretsInner
from typing import Optional, Set
from typing_extensions import Self

class TaskSpecContainerSpec(BaseModel):
    """
    Container spec for the service.  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
    """ # noqa: E501
    image: Optional[StrictStr] = Field(default=None, description="The image name to use for the container", alias="Image")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-defined key/value data.", alias="Labels")
    command: Optional[List[StrictStr]] = Field(default=None, description="The command to be run in the image.", alias="Command")
    args: Optional[List[StrictStr]] = Field(default=None, description="Arguments to the command.", alias="Args")
    hostname: Optional[StrictStr] = Field(default=None, description="The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname. ", alias="Hostname")
    env: Optional[List[StrictStr]] = Field(default=None, description="A list of environment variables in the form `VAR=value`. ", alias="Env")
    dir: Optional[StrictStr] = Field(default=None, description="The working directory for commands to run in.", alias="Dir")
    user: Optional[StrictStr] = Field(default=None, description="The user inside the container.", alias="User")
    groups: Optional[List[StrictStr]] = Field(default=None, description="A list of additional groups that the container process will run as. ", alias="Groups")
    privileges: Optional[TaskSpecContainerSpecPrivileges] = Field(default=None, alias="Privileges")
    tty: Optional[StrictBool] = Field(default=None, description="Whether a pseudo-TTY should be allocated.", alias="TTY")
    open_stdin: Optional[StrictBool] = Field(default=None, description="Open `stdin`", alias="OpenStdin")
    read_only: Optional[StrictBool] = Field(default=None, description="Mount the container's root filesystem as read only.", alias="ReadOnly")
    mounts: Optional[List[Mount]] = Field(default=None, description="Specification for mounts to be added to containers created as part of the service. ", alias="Mounts")
    stop_signal: Optional[StrictStr] = Field(default=None, description="Signal to stop the container.", alias="StopSignal")
    stop_grace_period: Optional[StrictInt] = Field(default=None, description="Amount of time to wait for the container to terminate before forcefully killing it. ", alias="StopGracePeriod")
    health_check: Optional[HealthConfig] = Field(default=None, alias="HealthCheck")
    hosts: Optional[List[StrictStr]] = Field(default=None, description="A list of hostname/IP mappings to add to the container's `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...] ", alias="Hosts")
    dns_config: Optional[TaskSpecContainerSpecDNSConfig] = Field(default=None, alias="DNSConfig")
    secrets: Optional[List[TaskSpecContainerSpecSecretsInner]] = Field(default=None, description="Secrets contains references to zero or more secrets that will be exposed to the service. ", alias="Secrets")
    configs: Optional[List[TaskSpecContainerSpecConfigsInner]] = Field(default=None, description="Configs contains references to zero or more configs that will be exposed to the service. ", alias="Configs")
    isolation: Optional[StrictStr] = Field(default=None, description="Isolation technology of the containers running the service. (Windows only) ", alias="Isolation")
    init: Optional[StrictBool] = Field(default=None, description="Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. ", alias="Init")
    sysctls: Optional[Dict[str, StrictStr]] = Field(default=None, description="Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks are made about their suitability for a clustered environment, and it's up to the user to determine whether a given sysctl will work properly in a Service. ", alias="Sysctls")
    capability_add: Optional[List[StrictStr]] = Field(default=None, description="A list of kernel capabilities to add to the default set for the container. ", alias="CapabilityAdd")
    capability_drop: Optional[List[StrictStr]] = Field(default=None, description="A list of kernel capabilities to drop from the default set for the container. ", alias="CapabilityDrop")
    ulimits: Optional[List[ResourcesUlimitsInner]] = Field(default=None, description="A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\" ", alias="Ulimits")
    __properties: ClassVar[List[str]] = ["Image", "Labels", "Command", "Args", "Hostname", "Env", "Dir", "User", "Groups", "Privileges", "TTY", "OpenStdin", "ReadOnly", "Mounts", "StopSignal", "StopGracePeriod", "HealthCheck", "Hosts", "DNSConfig", "Secrets", "Configs", "Isolation", "Init", "Sysctls", "CapabilityAdd", "CapabilityDrop", "Ulimits"]

    @field_validator('isolation')
    def isolation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default', 'process', 'hyperv']):
            raise ValueError("must be one of enum values ('default', 'process', 'hyperv')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskSpecContainerSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of privileges
        if self.privileges:
            _dict['Privileges'] = self.privileges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mounts (list)
        _items = []
        if self.mounts:
            for _item_mounts in self.mounts:
                if _item_mounts:
                    _items.append(_item_mounts.to_dict())
            _dict['Mounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of health_check
        if self.health_check:
            _dict['HealthCheck'] = self.health_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dns_config
        if self.dns_config:
            _dict['DNSConfig'] = self.dns_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in secrets (list)
        _items = []
        if self.secrets:
            for _item_secrets in self.secrets:
                if _item_secrets:
                    _items.append(_item_secrets.to_dict())
            _dict['Secrets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in configs (list)
        _items = []
        if self.configs:
            for _item_configs in self.configs:
                if _item_configs:
                    _items.append(_item_configs.to_dict())
            _dict['Configs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ulimits (list)
        _items = []
        if self.ulimits:
            for _item_ulimits in self.ulimits:
                if _item_ulimits:
                    _items.append(_item_ulimits.to_dict())
            _dict['Ulimits'] = _items
        # set to None if init (nullable) is None
        # and model_fields_set contains the field
        if self.init is None and "init" in self.model_fields_set:
            _dict['Init'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskSpecContainerSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Image": obj.get("Image"),
            "Labels": obj.get("Labels"),
            "Command": obj.get("Command"),
            "Args": obj.get("Args"),
            "Hostname": obj.get("Hostname"),
            "Env": obj.get("Env"),
            "Dir": obj.get("Dir"),
            "User": obj.get("User"),
            "Groups": obj.get("Groups"),
            "Privileges": TaskSpecContainerSpecPrivileges.from_dict(obj["Privileges"]) if obj.get("Privileges") is not None else None,
            "TTY": obj.get("TTY"),
            "OpenStdin": obj.get("OpenStdin"),
            "ReadOnly": obj.get("ReadOnly"),
            "Mounts": [Mount.from_dict(_item) for _item in obj["Mounts"]] if obj.get("Mounts") is not None else None,
            "StopSignal": obj.get("StopSignal"),
            "StopGracePeriod": obj.get("StopGracePeriod"),
            "HealthCheck": HealthConfig.from_dict(obj["HealthCheck"]) if obj.get("HealthCheck") is not None else None,
            "Hosts": obj.get("Hosts"),
            "DNSConfig": TaskSpecContainerSpecDNSConfig.from_dict(obj["DNSConfig"]) if obj.get("DNSConfig") is not None else None,
            "Secrets": [TaskSpecContainerSpecSecretsInner.from_dict(_item) for _item in obj["Secrets"]] if obj.get("Secrets") is not None else None,
            "Configs": [TaskSpecContainerSpecConfigsInner.from_dict(_item) for _item in obj["Configs"]] if obj.get("Configs") is not None else None,
            "Isolation": obj.get("Isolation"),
            "Init": obj.get("Init"),
            "Sysctls": obj.get("Sysctls"),
            "CapabilityAdd": obj.get("CapabilityAdd"),
            "CapabilityDrop": obj.get("CapabilityDrop"),
            "Ulimits": [ResourcesUlimitsInner.from_dict(_item) for _item in obj["Ulimits"]] if obj.get("Ulimits") is not None else None
        })
        return _obj


