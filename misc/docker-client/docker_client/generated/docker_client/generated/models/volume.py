# coding: utf-8

"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.45) is used. For example, calling `/info` is the same as calling `/v1.45/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 

    The version of the OpenAPI document: 1.45
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from docker_client.generated.models.cluster_volume import ClusterVolume
from docker_client.generated.models.volume_usage_data import VolumeUsageData
from typing import Optional, Set
from typing_extensions import Self

class Volume(BaseModel):
    """
    Volume
    """ # noqa: E501
    name: StrictStr = Field(description="Name of the volume.", alias="Name")
    driver: StrictStr = Field(description="Name of the volume driver used by the volume.", alias="Driver")
    mountpoint: StrictStr = Field(description="Mount path of the volume on the host.", alias="Mountpoint")
    created_at: Optional[StrictStr] = Field(default=None, description="Date/Time the volume was created.", alias="CreatedAt")
    status: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: `{\"key\":\"value\",\"key2\":\"value2\"}`.  The `Status` field is optional, and is omitted if the volume driver does not support this feature. ", alias="Status")
    labels: Dict[str, StrictStr] = Field(description="User-defined key/value metadata.", alias="Labels")
    scope: StrictStr = Field(description="The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. ", alias="Scope")
    cluster_volume: Optional[ClusterVolume] = Field(default=None, alias="ClusterVolume")
    options: Dict[str, StrictStr] = Field(description="The driver specific options used when creating the volume. ", alias="Options")
    usage_data: Optional[VolumeUsageData] = Field(default=None, alias="UsageData")
    __properties: ClassVar[List[str]] = ["Name", "Driver", "Mountpoint", "CreatedAt", "Status", "Labels", "Scope", "ClusterVolume", "Options", "UsageData"]

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['local', 'global']):
            raise ValueError("must be one of enum values ('local', 'global')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Volume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cluster_volume
        if self.cluster_volume:
            _dict['ClusterVolume'] = self.cluster_volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_data
        if self.usage_data:
            _dict['UsageData'] = self.usage_data.to_dict()
        # set to None if usage_data (nullable) is None
        # and model_fields_set contains the field
        if self.usage_data is None and "usage_data" in self.model_fields_set:
            _dict['UsageData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Volume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "Driver": obj.get("Driver"),
            "Mountpoint": obj.get("Mountpoint"),
            "CreatedAt": obj.get("CreatedAt"),
            "Status": obj.get("Status"),
            "Labels": obj.get("Labels"),
            "Scope": obj.get("Scope") if obj.get("Scope") is not None else 'local',
            "ClusterVolume": ClusterVolume.from_dict(obj["ClusterVolume"]) if obj.get("ClusterVolume") is not None else None,
            "Options": obj.get("Options"),
            "UsageData": VolumeUsageData.from_dict(obj["UsageData"]) if obj.get("UsageData") is not None else None
        })
        return _obj


