# coding: utf-8

"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.45) is used. For example, calling `/info` is the same as calling `/v1.45/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 

    The version of the OpenAPI document: 1.45
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from docker_client.generated.docker_client.generated.models.health_config import HealthConfig
from typing import Optional, Set
from typing_extensions import Self

class ContainerConfig(BaseModel):
    """
    Configuration for a container that is portable between hosts. 
    """ # noqa: E501
    hostname: Optional[StrictStr] = Field(default=None, description="The hostname to use for the container, as a valid RFC 1123 hostname. ", alias="Hostname")
    domainname: Optional[StrictStr] = Field(default=None, description="The domain name to use for the container. ", alias="Domainname")
    user: Optional[StrictStr] = Field(default=None, description="The user that commands are run as inside the container.", alias="User")
    attach_stdin: Optional[StrictBool] = Field(default=False, description="Whether to attach to `stdin`.", alias="AttachStdin")
    attach_stdout: Optional[StrictBool] = Field(default=True, description="Whether to attach to `stdout`.", alias="AttachStdout")
    attach_stderr: Optional[StrictBool] = Field(default=True, description="Whether to attach to `stderr`.", alias="AttachStderr")
    exposed_ports: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}` ", alias="ExposedPorts")
    tty: Optional[StrictBool] = Field(default=False, description="Attach standard streams to a TTY, including `stdin` if it is not closed. ", alias="Tty")
    open_stdin: Optional[StrictBool] = Field(default=False, description="Open `stdin`", alias="OpenStdin")
    stdin_once: Optional[StrictBool] = Field(default=False, description="Close `stdin` after one attached client disconnects", alias="StdinOnce")
    env: Optional[List[StrictStr]] = Field(default=None, description="A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value. ", alias="Env")
    cmd: Optional[List[StrictStr]] = Field(default=None, description="Command to run specified as a string or an array of strings. ", alias="Cmd")
    healthcheck: Optional[HealthConfig] = Field(default=None, alias="Healthcheck")
    args_escaped: Optional[StrictBool] = Field(default=False, description="Command is already escaped (Windows only)", alias="ArgsEscaped")
    image: Optional[StrictStr] = Field(default=None, description="The name (or reference) of the image to use when creating the container, or which was used when the container was created. ", alias="Image")
    volumes: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="An object mapping mount point paths inside the container to empty objects. ", alias="Volumes")
    working_dir: Optional[StrictStr] = Field(default=None, description="The working directory for commands to run in.", alias="WorkingDir")
    entrypoint: Optional[List[StrictStr]] = Field(default=None, description="The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`). ", alias="Entrypoint")
    network_disabled: Optional[StrictBool] = Field(default=None, description="Disable networking for the container.", alias="NetworkDisabled")
    mac_address: Optional[StrictStr] = Field(default=None, description="MAC address of the container.  Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead. ", alias="MacAddress")
    on_build: Optional[List[StrictStr]] = Field(default=None, description="`ONBUILD` metadata that were defined in the image's `Dockerfile`. ", alias="OnBuild")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-defined key/value metadata.", alias="Labels")
    stop_signal: Optional[StrictStr] = Field(default=None, description="Signal to stop a container as a string or unsigned integer. ", alias="StopSignal")
    stop_timeout: Optional[StrictInt] = Field(default=None, description="Timeout to stop a container in seconds.", alias="StopTimeout")
    shell: Optional[List[StrictStr]] = Field(default=None, description="Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. ", alias="Shell")
    __properties: ClassVar[List[str]] = ["Hostname", "Domainname", "User", "AttachStdin", "AttachStdout", "AttachStderr", "ExposedPorts", "Tty", "OpenStdin", "StdinOnce", "Env", "Cmd", "Healthcheck", "ArgsEscaped", "Image", "Volumes", "WorkingDir", "Entrypoint", "NetworkDisabled", "MacAddress", "OnBuild", "Labels", "StopSignal", "StopTimeout", "Shell"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of healthcheck
        if self.healthcheck:
            _dict['Healthcheck'] = self.healthcheck.to_dict()
        # set to None if exposed_ports (nullable) is None
        # and model_fields_set contains the field
        if self.exposed_ports is None and "exposed_ports" in self.model_fields_set:
            _dict['ExposedPorts'] = None

        # set to None if args_escaped (nullable) is None
        # and model_fields_set contains the field
        if self.args_escaped is None and "args_escaped" in self.model_fields_set:
            _dict['ArgsEscaped'] = None

        # set to None if network_disabled (nullable) is None
        # and model_fields_set contains the field
        if self.network_disabled is None and "network_disabled" in self.model_fields_set:
            _dict['NetworkDisabled'] = None

        # set to None if mac_address (nullable) is None
        # and model_fields_set contains the field
        if self.mac_address is None and "mac_address" in self.model_fields_set:
            _dict['MacAddress'] = None

        # set to None if on_build (nullable) is None
        # and model_fields_set contains the field
        if self.on_build is None and "on_build" in self.model_fields_set:
            _dict['OnBuild'] = None

        # set to None if stop_signal (nullable) is None
        # and model_fields_set contains the field
        if self.stop_signal is None and "stop_signal" in self.model_fields_set:
            _dict['StopSignal'] = None

        # set to None if stop_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.stop_timeout is None and "stop_timeout" in self.model_fields_set:
            _dict['StopTimeout'] = None

        # set to None if shell (nullable) is None
        # and model_fields_set contains the field
        if self.shell is None and "shell" in self.model_fields_set:
            _dict['Shell'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Hostname": obj.get("Hostname"),
            "Domainname": obj.get("Domainname"),
            "User": obj.get("User"),
            "AttachStdin": obj.get("AttachStdin") if obj.get("AttachStdin") is not None else False,
            "AttachStdout": obj.get("AttachStdout") if obj.get("AttachStdout") is not None else True,
            "AttachStderr": obj.get("AttachStderr") if obj.get("AttachStderr") is not None else True,
            "ExposedPorts": obj.get("ExposedPorts"),
            "Tty": obj.get("Tty") if obj.get("Tty") is not None else False,
            "OpenStdin": obj.get("OpenStdin") if obj.get("OpenStdin") is not None else False,
            "StdinOnce": obj.get("StdinOnce") if obj.get("StdinOnce") is not None else False,
            "Env": obj.get("Env"),
            "Cmd": obj.get("Cmd"),
            "Healthcheck": HealthConfig.from_dict(obj["Healthcheck"]) if obj.get("Healthcheck") is not None else None,
            "ArgsEscaped": obj.get("ArgsEscaped") if obj.get("ArgsEscaped") is not None else False,
            "Image": obj.get("Image"),
            "Volumes": obj.get("Volumes"),
            "WorkingDir": obj.get("WorkingDir"),
            "Entrypoint": obj.get("Entrypoint"),
            "NetworkDisabled": obj.get("NetworkDisabled"),
            "MacAddress": obj.get("MacAddress"),
            "OnBuild": obj.get("OnBuild"),
            "Labels": obj.get("Labels"),
            "StopSignal": obj.get("StopSignal"),
            "StopTimeout": obj.get("StopTimeout"),
            "Shell": obj.get("Shell")
        })
        return _obj


